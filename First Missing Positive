# https://leetcode.com/problems/first-missing-positive/

class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        i = 0
        for x in nums:
            if x < 1:
                nums[i] = 0
            i += 1
        l = len(nums)
        r = range
        for i in r(l):
            if nums[i] > l:
                nums[i] = 0
        for i in r(l):
            while not (nums[i] == 0 or nums[i] == i+1):
                if nums[nums[i] - 1] == nums[i]:
                    nums[i] = 0
                else:
                    nums[nums[i]-1] , nums[i] = nums[i] , nums[nums[i]-1]
        for i in r(l):
            if nums[i] == 0:
                return i+1
        return l+1
        
#java
class Solution {
    public int firstMissingPositive(int[] nums) {
        int i = 0;
        while (i < nums.length) {
            if (nums[i] == i + 1 || nums[i] > nums.length || nums[i] < 1 || nums[nums[i] - 1] == nums[i]) {
                i++;
                continue;
            }
            int temp = nums[nums[i] - 1];
            nums[nums[i] - 1] = nums[i];
            nums[i] = temp;
        }
        i = 0;
        while (i < nums.length) if (nums[i] != ++i) return i;
        return ++i;
    }
}
